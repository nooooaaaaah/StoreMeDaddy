<h2 class="text-lg font-bold mb-4">Available Disk Space</h2>
<Button Color="Color.Primary" Clicked="@(async () => await HandleRedraw())">Redraw</Button>
<DoughnutChart @ref="doughnutChart" TItem="double" Options="dChartOptions" />

@code {
    DoughnutChart<double>? doughnutChart;
    DoughnutChartOptions dChartOptions = new DoughnutChartOptions
    {
        Responsive = true,
        AspectRatio = 2,
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    async Task HandleRedraw()
    {
        if (doughnutChart == null)
        {
            return;
        }
        await doughnutChart.Clear();

        await doughnutChart.AddLabelsDatasetsAndUpdate(Labels, GetDoughnutChartDataset());
    }

    DoughnutChartDataset<double> GetDoughnutChartDataset()
    {
        return new DoughnutChartDataset<double>
            {
                Label = "# of randoms",
                Data = RandomizeData(),
                BackgroundColor = backgroundColors,
                BorderColor = borderColors,
            };
    }

    string[] Labels = { "Red", "Blue", "Yellow", "Green", "Purple", "Orange" };
    List<string> backgroundColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 0.2f ), ChartColor.FromRgba( 54,
162, 235, 0.2f ), ChartColor.FromRgba( 255, 206, 86, 0.2f ), ChartColor.FromRgba( 75, 192, 192, 0.2f ),
ChartColor.FromRgba( 153, 102, 255, 0.2f ), ChartColor.FromRgba( 255, 159, 64, 0.2f ) };
    List<string> borderColors = new List<string> { ChartColor.FromRgba( 255, 99, 132, 1f ), ChartColor.FromRgba( 54, 162,
235, 1f ), ChartColor.FromRgba( 255, 206, 86, 1f ), ChartColor.FromRgba( 75, 192, 192, 1f ), ChartColor.FromRgba( 153,
102, 255, 1f ), ChartColor.FromRgba( 255, 159, 64, 1f ) };

    List<double> RandomizeData()
    {
        var r = new Random(DateTime.Now.Millisecond);

        return new List<double> {
r.Next( 3, 50 ) * r.NextDouble(),
r.Next( 3, 50 ) * r.NextDouble(),
r.Next( 3, 50 ) * r.NextDouble(),
r.Next( 3, 50 ) * r.NextDouble(),
r.Next( 3, 50 ) * r.NextDouble(),
r.Next( 3, 50 ) * r.NextDouble() };
    }
}