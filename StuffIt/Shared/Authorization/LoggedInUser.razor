@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="">
    @* @if (User.Identity.IsAuthenticated) *@
    @if (true)
    {
        <div class="flex">
            <Logout />
            @* <UserIcon class="w-8 h-8 mt-1" /> *@
            <span class="text-indigo-200">Daddy</span>
            
        </div>
    }
    else
    {
        <a href="/login" class="btn btn-outline-light">Login</a>
    }
</div>

@* @code {
private async Task LogoutUser()
{
var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
var user = authState.User;

if (user.Identity.IsAuthenticated)
{
var anonymousIdentity = new ClaimsIdentity();
var anonymousPrincipal = new ClaimsPrincipal(anonymousIdentity);
var anonymousState = new AuthenticationState(anonymousPrincipal);

await AuthenticationStateProvider.SetAuthenticationStateAsync(anonymousState);

NavigationManager.NavigateTo("/", true);
}
}

private ClaimsPrincipal User => (AuthenticationState.User.Identity.IsAuthenticated) ? AuthenticationState.User : null;
private AuthenticationState AuthenticationState =>
Task.FromResult(AuthenticationStateProvider.GetAuthenticationStateAsync()).Result;
} *@