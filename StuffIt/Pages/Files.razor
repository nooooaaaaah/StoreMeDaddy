@page "/files"
@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.Logging
@inject IWebHostEnvironment Environment

<PageTitle>Files</PageTitle>
<h1 class="text-3xl">View Edit Upload</h1>


<p class="p-5">
    <InputFile OnChange="@LoadFiles" class="hidden" id="file-upload" />
    <label>
        Stuff me full of files
    </label>
    <button class="p-2">
        <label for="file-upload"
            class=" bg-gradient-to-l from-fuchsia-800 via-violet-800 to-indigo-800 hover:to-fuchsia-800 hover:from-indigo-800 hover:cursor-pointer font-bold py-2 px-4 rounded">
            Choose a File
        </label>
    </button>

</p>

@if (isLoading)
{
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mt-3">
    @for (int i = 0; i < 12; i++)
        {
            <div class="p-4 bg-slate-900 rounded-md shadow-md max-w-xs">
                <div class="h-20 bg-indigo-950 rounded-md"></div>
                <div class="animate-pulse  mt-2 h-4 w-36 bg-slate-800 rounded-md bg-opacity-60"></div>
                <div class="animate-pulse  mt-2 h-4 w-52 bg-slate-800 rounded-md bg-opacity-60"></div>
                <div class="animate-pulse  mt-2 h-4 w-52 bg-slate-800 rounded-md bg-opacity-60"></div>
            </div>
        }
    </div>
}

else
{
    <ul>
    @foreach (var file in loadedFiles)
        {
            <li>
                <ul class="p-4 bg-slate-900 rounded-md shadow-md max-w-xs">
                    <li class="h-20 bg-indigo-950 rounded-md">
                        <img alt="@file.Name" />
                    </li>
                    <div class="p-2 mt-3 bg-slate-800 rounded-md bg-opacity-60">
                        <li class="">Name: @file.Name</li>
                        <li class="">Last modified:
                            @file.LastModified.ToString()</li>
                        <li class="">Size (bytes): @file.Size</li>
                        <li class="">Content type:
                            @file.ContentType</li>
                    </div>
                </ul>
            </li>
        }
    </ul>
}

@code {
    private List<IBrowserFile> loadedFiles = new();
    private bool isLoading = true;

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles())
        {
            try
            {
                loadedFiles.Add(file);
                var trustedFileNameForFileStorage = file.Name;
                var path = Path.Combine(Environment.ContentRootPath,
                Environment.EnvironmentName, "unsafe_uploads",
                trustedFileNameForFileStorage);
                @* Console.WriteLine($"Path: {path}"); *@
                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream().CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"File: {file.Name} Error: {ex.Message}");
            }
            // print file metadata
            @* Console.WriteLine($"File: {file.Name} Size: {file.Size}"); *@
        }

        isLoading = false;
    }
}