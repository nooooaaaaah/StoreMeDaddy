@page "/serverActivity"
@using System.Collections.Generic
@using System.Linq
@using StuffIt.Shared.ServerActivity


<h1 class="text-2xl font-bold mb-4">Activity</h1>

<div class="grid grid-cols-2 gap-4">

    <div class="bg-slate-900 rounded-lg shadow-lg p-4 bg-opacity-50">
        <h2 class="text-lg font-bold mb-4">Total Bytes Written and Read</h2>
        <div class="flex justify-between">
            <div class="w-1/2">
                <p>Bytes Written</p>
                <p class="text-3xl font-bold">@TotalBytesWritten</p>
            </div>
            <div class="w-1/2">
                <p>Bytes Read</p>
                <p class="text-3xl font-bold">@TotalBytesRead</p>
            </div>
        </div>
    </div>

    <div class="bg-slate-900 rounded-lg shadow-lg p-4 bg-opacity-50">
        <h2 class="text-lg font-bold mb-4">Top Users by Write and Read Activity</h2>
        <table class="w-full">
            <thead>
                <tr class="border-b-2 border-violet-900">
                    <th class="text-left font-bold">User</th>
                    <th class="text-right font-bold">Bytes Written</th>
                    <th class="text-right font-bold">Bytes Read</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in TopUsers)
                {
                    <tr>
                        <td>@user.Name</td>
                        <td class="text-right">@user.BytesWritten</td>
                        <td class="text-right">@user.BytesRead</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="shadow-lg bg-slate-900 bg-opacity-50 rounded-lg p-4">
        <RWLineGraph />
    </div>
    <div class="shadow-lg bg-slate-900 bg-opacity-50 rounded-lg p-4">
        <RvWDonutGraph />
    </div>
</div>

@code {
    private int TotalBytesWritten => UserActivityList.Sum(u => u.BytesWritten);
    private int TotalBytesRead => UserActivityList.Sum(u => u.BytesRead);

    private List<UserActivity> TopUsers => UserActivityList.OrderByDescending(u => u.BytesWritten + u.BytesRead).ToList();

    public class UserActivity
    {
        public required string Name { get; set; }
        public int BytesWritten { get; set; }
        public int BytesRead { get; set; }
    }
    private List<UserActivity> UserActivityList = new List<UserActivity>
    {
        new UserActivity { Name = "John", BytesWritten = 1000, BytesRead = 500 },
        new UserActivity { Name = "Jane", BytesWritten = 2000, BytesRead = 1000 },
        new UserActivity { Name = "Bob", BytesWritten = 500, BytesRead = 1500 },
        new UserActivity { Name = "Alice", BytesWritten = 1500, BytesRead = 2000 },
    };
}